diff --git a/node_modules/@angular/bazel/src/esm5.bzl b/node_modules/@angular/bazel/src/esm5.bzl
index 667f601..7907c12 100755
--- a/node_modules/@angular/bazel/src/esm5.bzl
+++ b/node_modules/@angular/bazel/src/esm5.bzl
@@ -30,7 +30,7 @@ ESM5Info = provider(
 )
 
 def _map_closure_path(file):
-    result = file.short_path[:-len(".closure.js")]
+    result = file.short_path[:-len(".mjs")]
 
     # short_path is meant to be used when accessing runfiles in a binary, where
     # the CWD is inside the current repo. Therefore files in external repo have a
diff --git a/node_modules/@angular/bazel/src/external.bzl b/node_modules/@angular/bazel/src/external.bzl
index 4959f22..429f97f 100755
--- a/node_modules/@angular/bazel/src/external.bzl
+++ b/node_modules/@angular/bazel/src/external.bzl
@@ -15,16 +15,16 @@ load(
 )
 load(
     "@build_bazel_rules_nodejs//internal/common:node_module_info.bzl",
-    _NodeModuleSources = "NodeModuleSources",
-    _collect_node_modules_aspect = "collect_node_modules_aspect",
+    _NodeModuleInfo = "NodeModuleInfo",
+    _node_modules_aspect = "node_modules_aspect",
 )
 load(
     "@npm_bazel_typescript//internal:ts_config.bzl",
     _TsConfigInfo = "TsConfigInfo",
 )
 
-NodeModuleSources = _NodeModuleSources
-collect_node_modules_aspect = _collect_node_modules_aspect
+NodeModuleInfo = _NodeModuleInfo
+node_modules_aspect = _node_modules_aspect
 
 tsc_wrapped_tsconfig = _tsc_wrapped_tsconfig
 COMMON_ATTRIBUTES = _COMMON_ATTRIBUTES
diff --git a/node_modules/@angular/bazel/src/ng_module.bzl b/node_modules/@angular/bazel/src/ng_module.bzl
index 9b88fbb..7b2d7a9 100755
--- a/node_modules/@angular/bazel/src/ng_module.bzl
+++ b/node_modules/@angular/bazel/src/ng_module.bzl
@@ -13,14 +13,16 @@ load(
     "DEFAULT_NG_COMPILER",
     "DEFAULT_NG_XI18N",
     "DEPS_ASPECTS",
-    "NodeModuleSources",
+    "NodeModuleInfo",
     "TsConfigInfo",
-    "collect_node_modules_aspect",
+    "node_modules_aspect",
     "compile_ts",
     "ts_providers_dict_to_struct",
     "tsc_wrapped_tsconfig",
 )
 
+load("@build_bazel_rules_nodejs//:providers.bzl", "transitive_js_ecma_script_module_info", "transitive_js_module_info", "transitive_js_named_module_info")
+
 _FLAT_DTS_FILE_SUFFIX = ".bundle.d.ts"
 _R3_SYMBOLS_DTS_FILE = "src/r3_symbols.d.ts"
 
@@ -237,7 +239,7 @@ def _expected_outs(ctx):
             continue
 
         filter_summaries = ctx.attr.filter_summaries
-        closure_js = [f.replace(".js", ".closure.js") for f in devmode_js if not filter_summaries or not f.endswith(".ngsummary.js")]
+        closure_js = [f.replace(".js", ".mjs") for f in devmode_js if not filter_summaries or not f.endswith(".ngsummary.js")]
         declarations = [f.replace(".js", ".d.ts") for f in devmode_js]
 
         devmode_js_files += [ctx.actions.declare_file(basename + ext) for ext in devmode_js]
@@ -262,7 +264,7 @@ def _expected_outs(ctx):
     if _should_produce_flat_module_outs(ctx):
         flat_module_out = _flat_module_out_file(ctx)
         devmode_js_files.append(ctx.actions.declare_file("%s.js" % flat_module_out))
-        closure_js_files.append(ctx.actions.declare_file("%s.closure.js" % flat_module_out))
+        closure_js_files.append(ctx.actions.declare_file("%s.mjs" % flat_module_out))
         bundle_index_typings = ctx.actions.declare_file("%s.d.ts" % flat_module_out)
         declaration_files.append(bundle_index_typings)
         if is_legacy_ngc:
@@ -517,11 +519,11 @@ def _compile_action(ctx, inputs, outputs, dts_bundles_out, messages_out, tsconfi
             file_inputs += ctx.attr.tsconfig[TsConfigInfo].deps
 
     # Also include files from npm fine grained deps as action_inputs.
-    # These deps are identified by the NodeModuleSources provider.
+    # These deps are identified by the NodeModuleInfo provider.
     for d in ctx.attr.deps:
-        if NodeModuleSources in d:
+        if NodeModuleInfo in d:
             # Note: we can't avoid calling .to_list() on sources
-            file_inputs.extend(_filter_ts_inputs(d[NodeModuleSources].sources.to_list()))
+            file_inputs.extend(_filter_ts_inputs(d[NodeModuleInfo].transitive_sources.to_list()))
 
     # Collect the inputs and summary files from our deps
     action_inputs = depset(
@@ -603,9 +605,28 @@ def ng_module_impl(ctx, ts_compile_actions):
     return providers
 
 def _ng_module_impl(ctx):
-    return ts_providers_dict_to_struct(ng_module_impl(ctx, compile_ts))
-
-local_deps_aspects = [collect_node_modules_aspect, _collect_summaries_aspect]
+    ts_providers = ng_module_impl(ctx, compile_ts)
+
+    # Add in new JS providers
+    ts_providers["providers"].extend([
+        transitive_js_module_info(
+            module_format = "umd",
+            sources = ts_providers["typescript"]["es5_sources"],
+            deps = ctx.attr.deps,
+        ),
+        transitive_js_named_module_info(
+            sources = ts_providers["typescript"]["es5_sources"],
+            deps = ctx.attr.deps,
+        ),
+        transitive_js_ecma_script_module_info(
+            sources = ts_providers["typescript"]["es6_sources"],
+            deps = ctx.attr.deps,
+        ),
+    ])
+
+    return ts_providers_dict_to_struct(ts_providers)
+
+local_deps_aspects = [node_modules_aspect, _collect_summaries_aspect]
 
 # Workaround skydoc bug which assumes DEPS_ASPECTS is a str type
 [local_deps_aspects.append(a) for a in DEPS_ASPECTS]
diff --git a/node_modules/@angular/bazel/src/ng_package/ng_package.bzl b/node_modules/@angular/bazel/src/ng_package/ng_package.bzl
index 48d7619..64bc536 100755
--- a/node_modules/@angular/bazel/src/ng_package/ng_package.bzl
+++ b/node_modules/@angular/bazel/src/ng_package/ng_package.bzl
@@ -13,9 +13,9 @@ It packages your library following the Angular Package Format, see the
 specification of this format at https://goo.gl/jB3GVv
 """
 
+load("@build_bazel_rules_nodejs//:providers.bzl", "JSModuleInfo", "JSNamedModuleInfo")
 load("@build_bazel_rules_nodejs//internal/common:collect_es6_sources.bzl", "collect_es6_sources")
-load("@build_bazel_rules_nodejs//internal/common:node_module_info.bzl", "NodeModuleSources")
-load("@build_bazel_rules_nodejs//internal/common:sources_aspect.bzl", "sources_aspect")
+load("@build_bazel_rules_nodejs//internal/common:node_module_info.bzl", "NodeModuleInfo")
 load(
     "@build_bazel_rules_nodejs//internal/rollup:rollup_bundle.bzl",
     "ROLLUP_ATTRS",
@@ -347,10 +347,10 @@ def _ng_package_impl(ctx):
         node_modules_files = _filter_js_inputs(ctx.files.node_modules)
 
         # Also include files from npm fine grained deps as inputs.
-        # These deps are identified by the NodeModuleSources provider.
+        # These deps are identified by the NodeModuleInfo provider.
         for d in ctx.attr.deps:
-            if NodeModuleSources in d:
-                node_modules_files += _filter_js_inputs(d.files)
+            if NodeModuleInfo in d:
+                node_modules_files += _filter_js_inputs(d[NodeModuleInfo].transitive_sources)
         esm5_rollup_inputs = depset(node_modules_files, transitive = [esm5_sources])
 
         esm2015_config = write_rollup_config(ctx, [], "/".join([ctx.bin_dir.path, ctx.label.package, _esm2015_root_dir(ctx)]), filename = "_%s.rollup_esm2015.conf.js")
@@ -456,8 +456,8 @@ def _ng_package_impl(ctx):
     devfiles = depset()
     if ctx.attr.include_devmode_srcs:
         for d in ctx.attr.deps:
-            if hasattr(d, "node_sources"):
-                devfiles = depset(transitive = [devfiles, d.node_sources])
+            if JSNamedModuleInfo in dep:
+                devfiles = depset(transitive = [devfiles, d[JSNamedModuleInfo].sources])
 
     # Re-use the create_package function from the nodejs npm_package rule.
     package_dir = create_package(
@@ -469,7 +469,7 @@ def _ng_package_impl(ctx):
         files = depset([package_dir]),
     )]
 
-DEPS_ASPECTS = [esm5_outputs_aspect, sources_aspect]
+DEPS_ASPECTS = [esm5_outputs_aspect]
 
 # Workaround skydoc bug which assumes ROLLUP_DEPS_ASPECTS is a str type
 [DEPS_ASPECTS.append(a) for a in ROLLUP_DEPS_ASPECTS]
